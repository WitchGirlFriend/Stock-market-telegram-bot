import os
import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import TOKEN, CHAT_ID
from parsers.oil import get_oil_prices
from parsers.currency import get_currency_rates
from parsers.moex import get_moex_index
from parsers.metals import get_metal_prices
from parsers.wheat import get_wheat_price
from parsers.fuel import get_fuel_prices
from datetime import datetime

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
MESSAGE_FILE = "message_id.txt"


# === –°–±–æ—Ä–∫–∞ –æ—Ç—á—ë—Ç–∞ ===
async def build_report() -> str:
    try:
        brent, crude = await get_oil_prices()
        rates = get_currency_rates()
        imoex = get_moex_index()
        metals = get_metal_prices()
        wheat_price = await get_wheat_price()
        fuel = get_fuel_prices()

        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        fuel_text = (
        f"‚Ä¢ –î–¢ ‚Äî {fuel.get('–î–∏–∑–µ–ª—å', '–Ω/–¥')} ‚ÇΩ\n"
        f"‚Ä¢ –ê–ò-92 ‚Äî {fuel.get('–ê–ò-92', '–Ω/–¥')} ‚ÇΩ\n"
        f"‚Ä¢ –ê–ò-95 ‚Äî {fuel.get('–ê–ò-95', '–Ω/–¥')} ‚ÇΩ\n"
        f"‚Ä¢ –ê–ò-98 ‚Äî {fuel.get('–ê–ò-98', '–Ω/–¥')} ‚ÇΩ"
        )

        return f"""
    Brent {brent} ‚Äì $ {rates['USD']} ‚Äì Moex {imoex}// –ü—à–µ–Ω–∏—Ü–∞ - {wheat_price}
    
üõ¢ –ù–µ—Ñ—Ç—å: 
‚Ä¢ Brent ‚Äî ${brent}
‚Ä¢ Crude ‚Äî ${crude}

üí± –í–∞–ª—é—Ç–∞:
‚Ä¢ ‚ÇΩ / $ ‚Äî {rates['USD']}
‚Ä¢ ‚ÇΩ / ‚Ç¨ ‚Äî {rates['EUR']}
‚Ä¢ ‚ÇΩ / ¬• ‚Äî {rates['JPY']}

üìà –ò–Ω–¥–µ–∫—Å:
‚Ä¢ –ú–æ—Å–ë–∏—Ä–∂–∞ ‚Äî {imoex}

ü™ô –ú–µ—Ç–∞–ª–ª—ã:
‚Ä¢ –ó–æ–ª–æ—Ç–æ ‚Äî ${metals['Gold']}
‚Ä¢ –°–µ—Ä–µ–±—Ä–æ ‚Äî ${metals['Silver']}
‚Ä¢ –ü–ª–∞—Ç–∏–Ω–∞ ‚Äî ${metals['Platinum']}

üåæ –ü—à–µ–Ω–∏—Ü–∞:
‚Ä¢ Wheat ‚Äî ${wheat_price}

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {now}

‚õΩÔ∏è –¢–æ–ø–ª–∏–≤–æ:
{fuel_text}
"""
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ—Ç—á–µ—Ç–∞: {e}"

def save_message_id(message_id: int):
    with open(MESSAGE_FILE, "w") as f:
        f.write(str(message_id))


def load_message_id() -> int | None:
    if not os.path.exists(MESSAGE_FILE):
        return None
    with open(MESSAGE_FILE, "r") as f:
        return int(f.read().strip())


async def send_new_message(text: str) -> int:
    msg = await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode=ParseMode.HTML)
    save_message_id(msg.message_id)
    return msg.message_id


async def send_or_update():
    print(f"[{datetime.now().strftime('%H:%M:%S')}] üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    text = await build_report()
    message_id = load_message_id()

    if message_id:
        try:
            await bot.edit_message_text(
                chat_id=CHAT_ID,
                message_id=message_id,
                text=text,
                parse_mode=ParseMode.HTML
            )
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            new_id = await send_new_message(text)
            print(f"üì§ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {new_id}.")
    else:
        new_id = await send_new_message(text)
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {new_id}.")


# === –ö–æ–º–∞–Ω–¥–∞ /reset ===
@router.message(F.text == "/reset")
async def reset_message(msg: Message):
    message_id = load_message_id()
    if message_id:
        try:
            await bot.delete_message(chat_id=CHAT_ID, message_id=message_id)
            os.remove(MESSAGE_FILE)
            await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ...")
        except Exception as e:
            await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    else:
        await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞—é –Ω–æ–≤–æ–µ...")

    new_text = await build_report()
    new_id = await send_new_message(new_text)
    await msg.answer("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    dp.include_router(router)

    # 1. –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await send_or_update()

    # 2. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_or_update, "interval", minutes=1)
    scheduler.start()

    # 3. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
